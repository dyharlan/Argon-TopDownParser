
reactive mole64 x = 12;
reactive mole64 y = 12;
reactive mole32 a = input("Enter first number: ") + input("Enter second number: ") + input("Enter a third number: ");

println("value of a: " + a);

ferment(x > 1){
        ferment(y > 1){
            println("Iteration for nested: " + y);
            filter(x > 1) {
                println("x is greater than 1");
            }
            y-=1;
        }
        x-=1;
}

filter(x > 0) {
    filter (y > 0) {
        println("Both x and y are greater than 0");
    }
}
x = 12;
y = 12;

/*
    Note about distill and the choice to use the keyword "until":
    Distill - distill, brew or do something inside the body
    Until - until the condition provided becomes false
    Essentially another way of saying "do x while y is true"
*/
//distill {
//    ferment(y > 1){
//            println("Iteration for Distill: " + y);
//            y-=1;
//        }
//        x-=1;
//}until(x > 1);
filter(true .is. false){
    println("True!!!!!!!!!!!!!!!!!!");
} funnel {
    println("False!!!!!!!!!!!!!!!!!");
}

//filter (x > 0) {
//    println("True");
//} funnel {
//    println(x);
//}

//filter(x > 1 .or. true .or. false .or. 1 .is. 2) { //true .or. false .and. false) {
//    print("yes");
//} funnel {
//    print("no");
//}
//println(x);
//ferment(x > 3 .is. false) {
//ferment(x > 1 .and. true .or. false .or. x .is. z) {
//ferment (true) {
//ferment(true .and. true .or. true .and. false) {
//ferment((1 > 2) .and. (true .is. true)) {
//ferment (true .or. false .and. false) {
//ferment (x > 32 .and. true .and. true){
//filter (x > 32) {
//filter (true .and. false .or. false .and. true .or. false) {
//distill {
//filter(true .and. false) {
//funnel(true .and. false) {
    //filter(false) {
    //}
//ferment(true .and. false) {
//filter(true) {
//    print(x);
//} funnel {
//    print(x);
//}
//    print(x);
//} funnel filter (true .or. false) {
//    print(x);
//} funnel {
//   print(x);
//}
//}
    //println(x);
    //printerr(x);
    //reactive mole64 y = 1 + 1 * 1; //546 * 2 + 1 / 3 / 1;
//} funnel filter (true .or. false) {
//    println(x);
//funnel {
//    print(x);
//}
//} until(true .and. false .or. true .is. true);

//print(x);
//println(x);

//ferment(true) {
//
//}

//distill {
//    print(x);
//} until (x < 3);

    //ferment(x > 3) {
    //    println(x);
    //}

//filter(x < 32) {
//    print("x is less than 32!");
//}